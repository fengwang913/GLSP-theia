import { Disposable } from '../common';
import { Emitter, Event } from '../common/event';
export interface ContextKey<T> {
    set(value: T | undefined): void;
    reset(): void;
    get(): T | undefined;
}
export declare namespace ContextKey {
    const None: ContextKey<any>;
}
export interface ContextKeyChangeEvent {
    affects(keys: Set<string>): boolean;
}
export declare const ContextKeyService: unique symbol;
export interface ContextKeyService extends Disposable {
    readonly onDidChange: Event<ContextKeyChangeEvent>;
    createKey<T>(key: string, defaultValue: T | undefined): ContextKey<T>;
    /**
     * Whether the expression is satisfied. If `context` provided, the service will attempt to retrieve a context object associated with that element.
     */
    match(expression: string, context?: HTMLElement): boolean;
    /**
     * @returns a Set of the keys used by the given `expression` or `undefined` if none are used or the expression cannot be parsed.
     */
    parseKeys(expression: string): Set<string> | undefined;
    /**
     * Creates a temporary context that will use the `values` passed in when evaluating `callback`
     * `callback` must be synchronous.
     */
    with<T>(values: Record<string, unknown>, callback: () => T): T;
    /**
     * Creates a child service with a separate context scoped to the HTML element passed in.
     * Useful for e.g. setting the {view} context value for particular widgets.
     */
    createScoped(target: HTMLElement): ScopedValueStore;
    /**
     * Set or modify a value in the service's context.
     */
    setContext(key: string, value: unknown): void;
}
export declare type ScopedValueStore = Omit<ContextKeyService, 'onDidChange' | 'match' | 'parseKeys' | 'with'>;
export declare class ContextKeyServiceDummyImpl implements ContextKeyService {
    protected readonly onDidChangeEmitter: Emitter<ContextKeyChangeEvent>;
    readonly onDidChange: Event<ContextKeyChangeEvent>;
    protected fireDidChange(event: ContextKeyChangeEvent): void;
    createKey<T>(key: string, defaultValue: T | undefined): ContextKey<T>;
    /**
     * It should be implemented by an extension, e.g. by the monaco extension.
     */
    match(expression: string, context?: HTMLElement): boolean;
    /**
     * It should be implemented by an extension, e.g. by the monaco extension.
     */
    parseKeys(expression: string): Set<string> | undefined;
    /**
     * Details should be implemented by an extension, e.g. by the monaco extension.
     * Callback must be synchronous.
     */
    with<T>(values: Record<string, unknown>, callback: () => T): T;
    /**
     * Details should implemented by an extension, e.g. by the monaco extension.
     */
    createScoped(target: HTMLElement): ContextKeyService;
    /**
     * Details should be implemented by an extension, e.g. by the monaco extension.
     */
    setContext(key: string, value: unknown): void;
    dispose(): void;
}
//# sourceMappingURL=context-key-service.d.ts.map