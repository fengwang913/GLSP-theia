import { JSONValue } from '@phosphor/coreutils';
import { InjectablePreferenceProxy } from './injectable-preference-proxy';
import { OverridePreferenceName } from './preference-language-override-service';
import { PreferenceChanges } from './preference-service';
import { PreferenceValidationService } from './preference-validation-service';
export declare class ValidatedPreferenceProxy<T extends Record<string, JSONValue>> extends InjectablePreferenceProxy<T> {
    protected readonly validator: PreferenceValidationService;
    /**
     * This map should be initialized only when the proxy starts listening to events from the PreferenceService in {@link ValidatedPreferenceProxy.subscribeToChangeEvents}.
     * Otherwise, it can't guarantee that the cache will remain up-to-date and is better off just retrieving the value.
     */
    protected validPreferences?: Map<string, JSONValue>;
    protected handlePreferenceChanges(changes: PreferenceChanges): void;
    getValue<K extends keyof T & string>(preferenceIdentifier: K | (OverridePreferenceName & {
        preferenceName: K;
    }), defaultValue: T[K], resourceUri?: string | undefined): T[K];
    protected ensureValid<K extends keyof T & string>(preferenceName: K, getCandidate: () => T[K], isChange?: boolean): T[K];
    protected subscribeToChangeEvents(): void;
    dispose(): void;
}
//# sourceMappingURL=validated-preference-proxy.d.ts.map