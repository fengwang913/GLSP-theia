import { CompositeMenuNode, MenuPath, MenuNode } from '../../common';
import { Keybinding } from '../../common/keybinding';
import { PreferenceService } from '../../browser';
import { BrowserMainMenuFactory } from '../../browser/menu/browser-menu-plugin';
/**
 * Representation of possible electron menu options.
 */
export interface ElectronMenuOptions {
    /**
     * Controls whether to render disabled menu items.
     * Defaults to `true`.
     */
    readonly showDisabled?: boolean;
}
/**
 * Define the action of the menu item, when specified the `click` property will
 * be ignored. See [roles](https://www.electronjs.org/docs/api/menu-item#roles).
 */
export declare type ElectronMenuItemRole = ('undo' | 'redo' | 'cut' | 'copy' | 'paste' | 'pasteAndMatchStyle' | 'delete' | 'selectAll' | 'reload' | 'forceReload' | 'toggleDevTools' | 'resetZoom' | 'zoomIn' | 'zoomOut' | 'togglefullscreen' | 'window' | 'minimize' | 'close' | 'help' | 'about' | 'services' | 'hide' | 'hideOthers' | 'unhide' | 'quit' | 'startSpeaking' | 'stopSpeaking' | 'zoom' | 'front' | 'appMenu' | 'fileMenu' | 'editMenu' | 'viewMenu' | 'recentDocuments' | 'toggleTabBar' | 'selectNextTab' | 'selectPreviousTab' | 'mergeAllWindows' | 'clearRecentDocuments' | 'moveTabToNewWindow' | 'windowMenu');
export declare class ElectronMainMenuFactory extends BrowserMainMenuFactory {
    protected _menu?: Electron.Menu;
    protected _toggledCommands: Set<string>;
    protected preferencesService: PreferenceService;
    postConstruct(): void;
    setMenuBar(): Promise<void>;
    createElectronMenuBar(): Electron.Menu | null;
    createElectronContextMenu(menuPath: MenuPath, args?: any[]): Electron.Menu;
    protected fillMenuTemplate(items: Electron.MenuItemConstructorOptions[], menuModel: CompositeMenuNode, args?: any[], options?: ElectronMenuOptions): Electron.MenuItemConstructorOptions[];
    protected handleElectronDefault(menuNode: MenuNode, args?: any[], options?: ElectronMenuOptions): Electron.MenuItemConstructorOptions[];
    /**
     * Return a user visible representation of a keybinding.
     */
    protected acceleratorFor(keybinding: Keybinding): string;
    protected roleFor(id: string): ElectronMenuItemRole | undefined;
    protected execute(command: string, args: any[]): Promise<void>;
    protected createOSXMenu(): Electron.MenuItemConstructorOptions;
}
//# sourceMappingURL=electron-main-menu-factory.d.ts.map