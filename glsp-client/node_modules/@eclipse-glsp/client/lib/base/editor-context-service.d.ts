/********************************************************************************
 * Copyright (c) 2020-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, Args, EditorContext } from '@eclipse-glsp/protocol';
import { IActionHandler, ModelSource, MousePositionTracker, SModelElement, SModelRoot } from 'sprotty';
import { SelectionService } from '../features/select/selection-service';
export interface EditModeListener {
    editModeChanged(newValue: string, oldvalue: string): void;
}
/**
 * The `EditorContextService` is a central injectable component that gives read-only access to
 * certain aspects of the diagram, such as the currently selected elements, the model root,
 * the edit mode, the latest position of the mouse in the diagram.
 *
 * It has been introduced for two main reasons:
 * 1. to simplify accessing the model root and the current selection from components that are
 *    not commands,
 * 2. to conveniently create an EditorContext, which is a context object sent as part of several
 *    actions to the server to describe the current state of the editor (selection, last mouse
 *    position, etc.).
 */
export declare class EditorContextService implements IActionHandler {
    protected selectionService: SelectionService;
    protected mousePositionTracker: MousePositionTracker;
    protected editModeListeners: EditModeListener[];
    protected modelSourceProvider: () => Promise<ModelSource>;
    protected _editMode: string;
    register(editModeListener: EditModeListener): void;
    deregister(editModeListener: EditModeListener): void;
    get(args?: Args): EditorContext;
    getWithSelection(selectedElementIds: string[], args?: Args): EditorContext;
    handle(action: Action): void;
    protected notifiyEditModeListeners(oldValue: string): void;
    getSourceUri(): Promise<string | undefined>;
    get editMode(): string;
    get modelRoot(): Readonly<SModelRoot>;
    get selectedElements(): Readonly<SModelElement>[];
    get isReadonly(): boolean;
}
export declare type EditorContextServiceProvider = () => Promise<EditorContextService>;
//# sourceMappingURL=editor-context-service.d.ts.map