"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackAwareUpdateModelCommand = exports.SetModelActionHandler = void 0;
/********************************************************************************
 * Copyright (c) 2019-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const protocol_1 = require("@eclipse-glsp/protocol");
const inversify_1 = require("inversify");
const sprotty_1 = require("sprotty");
const types_1 = require("../types");
/**
 * ActionHandler that transforms a {@link SetModelAction} into an {@link UpdateModelAction} that can be handled
 * by the {@link FeedbackAwareUpdateModelCommand}. This can be done because in sprotty an {@link UpdateModelCommand} and
 * a {@link SetModelCommand} have the same behavior of no model is present yet.
 */
let SetModelActionHandler = class SetModelActionHandler {
    handle(action) {
        if (protocol_1.SetModelAction.is(action)) {
            return protocol_1.UpdateModelAction.create(action.newRoot, { animate: false });
        }
    }
};
SetModelActionHandler = __decorate([
    (0, inversify_1.injectable)()
], SetModelActionHandler);
exports.SetModelActionHandler = SetModelActionHandler;
/**
 * A special {@link UpdateModelCommand} that retrieves all registered {@link Action}s from the {@link IFeedbackActionDispatcher}
 * (if present) and applies their feedback to the `newRoot` before performing the update. This enables persistent client-side feedback
 * across model updates initiated by the GLSP server.
 */
let FeedbackAwareUpdateModelCommand = class FeedbackAwareUpdateModelCommand extends sprotty_1.UpdateModelCommand {
    constructor(action, actionHandlerRegistryProvider) {
        super(Object.assign({ animate: true }, action));
        this.modelRootListeners = [];
        actionHandlerRegistryProvider().then(registry => (this.actionHandlerRegistry = registry));
    }
    performUpdate(oldRoot, newRoot, context) {
        if (this.feedbackActionDispatcher && this.actionHandlerRegistry) {
            // Create a temporary context which defines the `newRoot` as `root`
            // This way we do not corrupt the redo/undo behavior of the super class
            const tempContext = Object.assign(Object.assign({}, context), { root: newRoot });
            const feedbackCommands = this.getFeedbackCommands(this.actionHandlerRegistry);
            feedbackCommands.forEach(command => command.execute(tempContext));
        }
        this.modelRootListeners.forEach(listener => listener.modelRootChanged(newRoot));
        return super.performUpdate(oldRoot, newRoot, context);
    }
    getFeedbackCommands(registry) {
        const result = [];
        this.feedbackActionDispatcher.getRegisteredFeedback().forEach(action => {
            const commands = registry
                .get(action.kind)
                .filter((0, protocol_1.toTypeGuard)(sprotty_1.CommandActionHandler))
                .map(handler => handler.handle(action));
            result.push(...commands);
        });
        // sort commands descanting by priority
        return result.sort((a, b) => this.getPriority(b) - this.getPriority(a));
    }
    getPriority(command) {
        var _a;
        return (_a = command.priority) !== null && _a !== void 0 ? _a : 0;
    }
    // Override the `createAnimations` implementation and remove the animation for edge morphing. Otherwise routing & reconnect
    // handles flicker after each server update.
    createAnimations(data, root, context) {
        const animations = super.createAnimations(data, root, context);
        return animations.filter(animation => !(animation instanceof sprotty_1.MorphEdgesAnimation));
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], FeedbackAwareUpdateModelCommand.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IFeedbackActionDispatcher),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], FeedbackAwareUpdateModelCommand.prototype, "feedbackActionDispatcher", void 0);
__decorate([
    (0, inversify_1.multiInject)(types_1.TYPES.SModelRootListener),
    (0, inversify_1.optional)(),
    __metadata("design:type", Array)
], FeedbackAwareUpdateModelCommand.prototype, "modelRootListeners", void 0);
FeedbackAwareUpdateModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.ActionHandlerRegistryProvider)),
    __metadata("design:paramtypes", [Object, Function])
], FeedbackAwareUpdateModelCommand);
exports.FeedbackAwareUpdateModelCommand = FeedbackAwareUpdateModelCommand;
//# sourceMappingURL=update-model-command.js.map