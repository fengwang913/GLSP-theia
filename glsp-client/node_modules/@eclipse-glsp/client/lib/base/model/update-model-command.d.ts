/********************************************************************************
 * Copyright (c) 2019-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, UpdateModelAction } from '@eclipse-glsp/protocol';
import { ActionHandlerRegistry, Animation, Command, CommandExecutionContext, CommandReturn, IActionHandler, ILogger, SModelRoot, UpdateAnimationData, UpdateModelCommand } from 'sprotty';
import { IFeedbackActionDispatcher } from '../../features/tool-feedback/feedback-action-dispatcher';
import { FeedbackCommand } from '../../features/tool-feedback/model';
/**
 * ActionHandler that transforms a {@link SetModelAction} into an {@link UpdateModelAction} that can be handled
 * by the {@link FeedbackAwareUpdateModelCommand}. This can be done because in sprotty an {@link UpdateModelCommand} and
 * a {@link SetModelCommand} have the same behavior of no model is present yet.
 */
export declare class SetModelActionHandler implements IActionHandler {
    handle(action: Action): Action | void;
}
export interface SModelRootListener {
    modelRootChanged(root: Readonly<SModelRoot>): void;
}
/**
 * A special {@link UpdateModelCommand} that retrieves all registered {@link Action}s from the {@link IFeedbackActionDispatcher}
 * (if present) and applies their feedback to the `newRoot` before performing the update. This enables persistent client-side feedback
 * across model updates initiated by the GLSP server.
 */
export declare class FeedbackAwareUpdateModelCommand extends UpdateModelCommand {
    protected logger: ILogger;
    protected feedbackActionDispatcher: IFeedbackActionDispatcher;
    protected modelRootListeners: SModelRootListener[];
    protected actionHandlerRegistry?: ActionHandlerRegistry;
    constructor(action: UpdateModelAction, actionHandlerRegistryProvider: () => Promise<ActionHandlerRegistry>);
    protected performUpdate(oldRoot: SModelRoot, newRoot: SModelRoot, context: CommandExecutionContext): CommandReturn;
    protected getFeedbackCommands(registry: ActionHandlerRegistry): Command[];
    protected getPriority(command: Partial<FeedbackCommand>): number;
    protected createAnimations(data: UpdateAnimationData, root: SModelRoot, context: CommandExecutionContext): Animation[];
}
//# sourceMappingURL=update-model-command.d.ts.map