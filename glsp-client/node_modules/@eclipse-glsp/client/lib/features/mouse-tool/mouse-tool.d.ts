import { MouseListener, MouseTool, SModelElement, SModelRoot } from 'sprotty';
export interface IMouseTool {
    register(mouseListener: MouseListener): void;
    deregister(mouseListener: MouseListener): void;
}
/**
 * Custom helper type to declare the explicit mouse listener methods
 * of {@link MouseListener} i.e. omitting the `decorate` method.
 */
declare type MouseListenerMethods = keyof Omit<MouseListener, 'decorate'>;
export declare class RankingMouseTool extends MouseTool implements IMouseTool {
    protected mouseListeners: MouseListener[];
    protected rankedMouseListeners: Map<number, MouseListener[]>;
    constructor(mouseListeners?: MouseListener[]);
    register(mouseListener: MouseListener): void;
    deregister(mouseListener: MouseListener): void;
    contextMenu(model: SModelRoot, event: MouseEvent): void;
    protected handleEvent<K extends MouseListenerMethods>(methodName: K, model: SModelRoot, event: MouseEvent): void;
    notifyListenersByRank<K extends MouseListenerMethods>(element: SModelElement, methodName: K, model: SModelRoot, event: MouseEvent): Promise<void>;
    dispatchActions<K extends MouseListenerMethods>(mouseListeners: MouseListener[], methodName: K, element: SModelElement, event: MouseEvent): Promise<void>;
}
export {};
//# sourceMappingURL=mouse-tool.d.ts.map