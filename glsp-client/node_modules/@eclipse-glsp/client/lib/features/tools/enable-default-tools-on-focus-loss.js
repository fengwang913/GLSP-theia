"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnableDefaultToolsOnFocusLossHandler = void 0;
const inversify_1 = require("inversify");
const sprotty_1 = require("sprotty");
const focus_change_action_1 = require("../../base/actions/focus-change-action");
/**
 * Action handler that enables the default tools when the diagram lost focus.
 * @see FocusTracker
 * @see FocusStateChangedAction
 */
let EnableDefaultToolsOnFocusLossHandler = class EnableDefaultToolsOnFocusLossHandler {
    handle(action) {
        if (focus_change_action_1.FocusStateChangedAction.is(action) && !action.hasFocus) {
            return sprotty_1.EnableDefaultToolsAction.create();
        }
    }
};
EnableDefaultToolsOnFocusLossHandler = __decorate([
    (0, inversify_1.injectable)()
], EnableDefaultToolsOnFocusLossHandler);
exports.EnableDefaultToolsOnFocusLossHandler = EnableDefaultToolsOnFocusLossHandler;
//# sourceMappingURL=enable-default-tools-on-focus-loss.js.map