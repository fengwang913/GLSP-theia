/********************************************************************************
 * Copyright (c) 2021-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Bounds, Dimension, Point } from '@eclipse-glsp/protocol';
import { BoundsData, LayoutContainer, SChildElement, SModelElement, SParentElement, StatefulLayouter, HBoxLayouter, HBoxLayoutOptions } from 'sprotty';
export interface HBoxLayoutOptionsExt extends HBoxLayoutOptions {
    hGrab: boolean;
    vGrab: boolean;
    prefWidth: number | null;
    prefHeight: number | null;
}
/**
 * Extends HBoxLayouter to support additional layout options
 */
export declare class HBoxLayouterExt extends HBoxLayouter {
    static KIND: string;
    layout(container: SParentElement & LayoutContainer, layouter: StatefulLayouter): void;
    protected getChildrenSize(container: SParentElement & LayoutContainer, containerOptions: HBoxLayoutOptionsExt, layouter: StatefulLayouter): Dimension;
    protected layoutChildren(container: SParentElement & LayoutContainer, layouter: StatefulLayouter, containerOptions: HBoxLayoutOptionsExt, maxWidth: number, maxHeight: number, grabWidth?: number, grabbingChildren?: number): Point;
    protected layoutChild(child: SChildElement, boundsData: BoundsData, bounds: Bounds, childOptions: HBoxLayoutOptionsExt, containerOptions: HBoxLayoutOptionsExt, currentOffset: Point, maxWidth: number, maxHeight: number, grabWidth?: number, grabbingChildren?: number): Point;
    protected getFixedContainerBounds(container: SModelElement, layoutOptions: HBoxLayoutOptionsExt, layouter: StatefulLayouter): Bounds;
    protected getChildLayoutOptions(child: SChildElement, containerOptions: HBoxLayoutOptionsExt): HBoxLayoutOptionsExt;
    protected getLayoutOptions(element: SModelElement): HBoxLayoutOptionsExt;
    protected getElementLayoutOptions(element: SModelElement): HBoxLayoutOptionsExt | undefined;
    protected getFinalContainerBounds(container: SParentElement & LayoutContainer, lastOffset: Point, options: HBoxLayoutOptionsExt, maxWidth: number, maxHeight: number): Bounds;
    protected getDefaultLayoutOptions(): HBoxLayoutOptionsExt;
    protected spread(a: HBoxLayoutOptionsExt, b: HBoxLayoutOptionsExt): HBoxLayoutOptionsExt;
}
//# sourceMappingURL=hbox-layout.d.ts.map