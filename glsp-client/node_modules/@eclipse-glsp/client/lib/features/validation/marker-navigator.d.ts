/********************************************************************************
 * Copyright (c) 2020-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, Point } from '@eclipse-glsp/protocol';
import { ActionDispatcher, BoundsAware, IActionHandler, IContextMenuItemProvider, KeyListener, MenuItem, Selectable, SIssueMarker, SIssueSeverity, SModelElement, SModelRoot } from 'sprotty';
import { SelectionService } from '../select/selection-service';
export interface NavigateToMarkerAction extends Action {
    kind: typeof NavigateToMarkerAction.KIND;
    direction: MarkerNavigationDirection;
    selectedElementIds?: string[];
    severities: SIssueSeverity[];
}
export declare type MarkerNavigationDirection = 'next' | 'previous';
export declare namespace NavigateToMarkerAction {
    const KIND = "navigateToMarker";
    function is(object: any): object is NavigateToMarkerAction;
    function create(options: {
        direction?: MarkerNavigationDirection;
        selectedElementIds?: string[];
        severities?: SIssueSeverity[];
    }): NavigateToMarkerAction;
}
export declare class SModelElementComparator {
    compare(_one: SModelElement, _other: SModelElement): number;
}
/** Specifies the order of two selectable and bounds-aware elements left-to-right and top-to-bottom. */
export declare class LeftToRightTopToBottomComparator {
    compare(one: SModelElement, other: SModelElement): number;
}
/**
 * Specifies the next/previous marker in a graph model.
 *
 * This navigator uses a `MarkerComparator` to determine the order of markers. It can also return next/previous
 */
export declare class MarkerNavigator {
    static readonly ALL_SEVERITIES: SIssueSeverity[];
    protected markerComparator: SModelElementComparator;
    next(root: Readonly<SModelRoot>, current?: SModelElement & BoundsAware, predicate?: (marker: SIssueMarker) => boolean): SIssueMarker | undefined;
    previous(root: Readonly<SModelRoot>, current?: SModelElement & BoundsAware, predicate?: (marker: SIssueMarker) => boolean): SIssueMarker | undefined;
    protected getMarkers(root: Readonly<SModelRoot>, predicate: (marker: SIssueMarker) => boolean): SIssueMarker[];
    protected getNextIndex(current: SModelElement & BoundsAware, markers: SIssueMarker[]): number;
    protected getPreviousIndex(current: SModelElement & BoundsAware, markers: SIssueMarker[]): number;
}
export declare class NavigateToMarkerActionHandler implements IActionHandler {
    protected markerComparator: SModelElementComparator;
    protected markerNavigator: MarkerNavigator;
    protected selectionService: SelectionService;
    protected actionDispatcher: ActionDispatcher;
    handle(action: NavigateToMarkerAction): void;
    protected getSelectedElements(action: NavigateToMarkerAction): (SModelElement & Selectable)[];
    protected getTarget(action: NavigateToMarkerAction, selected: SModelElement[]): SIssueMarker | undefined;
    protected matchesSeverities(action: NavigateToMarkerAction, marker: SIssueMarker): boolean;
}
export declare class MarkerNavigatorContextMenuItemProvider implements IContextMenuItemProvider {
    protected selectionService: SelectionService;
    getItems(root: Readonly<SModelRoot>, lastMousePosition?: Point): Promise<MenuItem[]>;
}
export declare class MarkerNavigatorKeyListener extends KeyListener {
    keyDown(_element: SModelElement, event: KeyboardEvent): Action[];
}
//# sourceMappingURL=marker-navigator.d.ts.map