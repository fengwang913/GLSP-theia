/********************************************************************************
 * Copyright (c) 2019-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, Point } from '@eclipse-glsp/protocol';
import { VNode } from 'snabbdom';
import { AnchorComputerRegistry, CommandExecutionContext, CommandReturn, EdgeRouterRegistry, ElementMove, ISnapper, MouseListener, SConnectableElement, SModelElement, SRoutingHandle, SwitchEditModeAction, SwitchEditModeCommand } from 'sprotty';
import { PointPositionUpdater } from '../change-bounds/snap';
import { FeedbackEdgeEndMovingMouseListener } from './creation-tool-feedback';
import { FeedbackCommand } from './model';
/**
 * RECONNECT HANDLES FEEDBACK
 */
export interface ShowEdgeReconnectHandlesFeedbackAction extends Action {
    kind: typeof ShowEdgeReconnectHandlesFeedbackAction.KIND;
    readonly elementId: string;
}
export declare namespace ShowEdgeReconnectHandlesFeedbackAction {
    const KIND = "showReconnectHandlesFeedback";
    function is(object: any): object is ShowEdgeReconnectHandlesFeedbackAction;
    function create(elementId: string): ShowEdgeReconnectHandlesFeedbackAction;
}
export interface HideEdgeReconnectHandlesFeedbackAction extends Action {
    kind: typeof HideEdgeReconnectHandlesFeedbackAction.KIND;
}
export declare namespace HideEdgeReconnectHandlesFeedbackAction {
    const KIND = "hideReconnectHandlesFeedback";
    function is(object: any): object is HideEdgeReconnectHandlesFeedbackAction;
    function create(): HideEdgeReconnectHandlesFeedbackAction;
}
export declare class ShowEdgeReconnectHandlesFeedbackCommand extends FeedbackCommand {
    protected action: ShowEdgeReconnectHandlesFeedbackAction;
    static readonly KIND = "showReconnectHandlesFeedback";
    constructor(action: ShowEdgeReconnectHandlesFeedbackAction);
    execute(context: CommandExecutionContext): CommandReturn;
}
export declare class HideEdgeReconnectHandlesFeedbackCommand extends FeedbackCommand {
    protected action: HideEdgeReconnectHandlesFeedbackAction;
    static readonly KIND = "hideReconnectHandlesFeedback";
    constructor(action: HideEdgeReconnectHandlesFeedbackAction);
    execute(context: CommandExecutionContext): CommandReturn;
}
/**
 * ROUTING FEEDBACK
 */
export interface SwitchRoutingModeAction extends Omit<SwitchEditModeAction, 'kind'> {
    kind: typeof SwitchRoutingModeAction.KIND;
}
export declare namespace SwitchRoutingModeAction {
    const KIND = "switchRoutingMode";
    function create(options: {
        elementsToActivate?: string[];
        elementsToDeactivate?: string[];
    }): SwitchRoutingModeAction;
}
export declare class SwitchRoutingModeCommand extends SwitchEditModeCommand {
    static KIND: string;
    constructor(action: SwitchRoutingModeAction);
}
/**
 * SOURCE AND TARGET EDGE FEEDBACK
 */
export interface DrawFeedbackEdgeSourceAction extends Action {
    kind: typeof DrawFeedbackEdgeSourceAction.KIND;
    elementTypeId: string;
    targetId: string;
}
export declare namespace DrawFeedbackEdgeSourceAction {
    const KIND = "drawFeedbackEdgeSource";
    function is(object: any): object is DrawFeedbackEdgeSourceAction;
    function create(options: {
        elementTypeId: string;
        targetId: string;
    }): DrawFeedbackEdgeSourceAction;
}
export declare class DrawFeedbackEdgeSourceCommand extends FeedbackCommand {
    protected action: DrawFeedbackEdgeSourceAction;
    static readonly KIND = "drawFeedbackEdgeSource";
    constructor(action: DrawFeedbackEdgeSourceAction);
    execute(context: CommandExecutionContext): CommandReturn;
}
/**
 * SOURCE AND TARGET MOUSE MOVE LISTENER
 */
export declare class FeedbackEdgeTargetMovingMouseListener extends FeedbackEdgeEndMovingMouseListener {
    protected anchorRegistry: AnchorComputerRegistry;
    constructor(anchorRegistry: AnchorComputerRegistry);
}
export declare class FeedbackEdgeSourceMovingMouseListener extends MouseListener {
    protected anchorRegistry: AnchorComputerRegistry;
    constructor(anchorRegistry: AnchorComputerRegistry);
    mouseMove(target: SModelElement, event: MouseEvent): Action[];
    protected computeAbsoluteAnchor(element: SConnectableElement, referencePoint: Point, offset?: number): Point;
}
export declare class FeedbackEdgeRouteMovingMouseListener extends MouseListener {
    protected edgeRouterRegistry?: EdgeRouterRegistry | undefined;
    protected snapper?: ISnapper | undefined;
    protected pointPositionUpdater: PointPositionUpdater;
    constructor(edgeRouterRegistry?: EdgeRouterRegistry | undefined, snapper?: ISnapper | undefined);
    mouseDown(target: SModelElement, event: MouseEvent): Action[];
    mouseMove(target: SModelElement, event: MouseEvent): Action[];
    protected handleMoveOnClient(target: SModelElement, positionUpdate: Point, isSnap: boolean): Action[];
    protected toElementMove(element: SRoutingHandle, positionDelta: Point, isSnap: boolean): ElementMove | undefined;
    protected getSnappedHandlePosition(element: SRoutingHandle, point: Point, isSnap: boolean): Point;
    protected getHandlePosition(handle: SRoutingHandle): Point | undefined;
    mouseEnter(target: SModelElement, event: MouseEvent): Action[];
    mouseUp(_target: SModelElement, event: MouseEvent): Action[];
    decorate(vnode: VNode, _element: SModelElement): VNode;
}
//# sourceMappingURL=edge-edit-tool-feedback.d.ts.map