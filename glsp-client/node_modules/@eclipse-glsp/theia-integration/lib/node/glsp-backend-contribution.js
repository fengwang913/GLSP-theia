"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPBackendContribution = void 0;
/********************************************************************************
 * Copyright (C) 2018-2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const common_1 = require("@theia/core/lib/common");
const inversify_1 = require("@theia/core/shared/inversify");
const common_2 = require("../common");
const glsp_server_contribution_1 = require("./glsp-server-contribution");
let GLSPBackendContribution = class GLSPBackendContribution {
    constructor() {
        this.nextId = 1;
        this.sessions = new Map();
    }
    async create(_contributionId, startParameters) {
        const id = this.nextId;
        this.nextId++;
        const sessionId = String(id);
        this.sessions.set(sessionId, startParameters);
        return sessionId;
    }
    async destroy(sessionId) {
        this.sessions.delete(sessionId);
    }
    configure(service) {
        for (const contribution of this.contributors.getContributions()) {
            const path = common_2.GLSPContribution.getPath(contribution);
            if (glsp_server_contribution_1.GLSPServerContributionOptions.shouldLaunchOnApplicationStart(contribution)) {
                contribution.launch().then(() => this.forward(service, path, contribution));
            }
            else {
                this.forward(service, path, contribution);
            }
        }
    }
    forward(service, path, contribution) {
        service.forward(path, async (params, connection) => {
            try {
                connection.onClose(() => this.destroy(params.id));
                await contribution.connect(connection);
            }
            catch (e) {
                this.logger.error(`Error occurred while starting GLSP contribution. ${path}.`, e);
            }
        });
    }
};
__decorate([
    (0, inversify_1.inject)(common_1.ILogger),
    (0, inversify_1.named)('glsp'),
    __metadata("design:type", Object)
], GLSPBackendContribution.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(common_1.ContributionProvider),
    (0, inversify_1.named)(glsp_server_contribution_1.GLSPServerContribution),
    __metadata("design:type", Object)
], GLSPBackendContribution.prototype, "contributors", void 0);
GLSPBackendContribution = __decorate([
    (0, inversify_1.injectable)()
], GLSPBackendContribution);
exports.GLSPBackendContribution = GLSPBackendContribution;
//# sourceMappingURL=glsp-backend-contribution.js.map