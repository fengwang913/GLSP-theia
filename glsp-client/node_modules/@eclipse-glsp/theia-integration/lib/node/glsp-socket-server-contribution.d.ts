/// <reference types="node" />
import { RawProcess } from '@theia/process/lib/node/raw-process';
import * as net from 'net';
import { IConnection } from 'vscode-ws-jsonrpc/lib/server';
import { BaseGLSPServerContribution, GLSPServerContributionOptions } from './glsp-server-contribution';
/**
 * Message that is expected to be printed by the embedded server process to the stdout once the
 * server process startup routine has been completed and is ready to accept incoming connections.
 */
export declare const START_UP_COMPLETE_MSG = "[GLSP-Server]:Startup completed";
export interface GLSPSocketServerContributionOptions extends GLSPServerContributionOptions {
    /**
     * Path to the location of the server executable that should be launched as process
     * Has to be either be a *.jar (Java) or *.js (Node ) file.
     */
    executable?: string;
    /** Socket connection options for new client connections */
    socketConnectionOptions: net.TcpSocketConnectOpts;
    /** Additional arguments that should be passed when starting the server process. */
    additionalArgs?: string[];
}
export declare namespace GLSPSocketServerContributionOptions {
    /** Default values for {@link JavaGLSPServerLaunchOptions }**/
    function createDefaultOptions(): GLSPSocketServerContributionOptions;
    /**
     * Utility function to partially set the launch options. Default values (from 'defaultOptions') are used for
     * options that are not specified.
     * @param options (partial) launch options that should be extended with default values (if necessary)
     */
    function configure(options?: Partial<GLSPSocketServerContributionOptions>): GLSPSocketServerContributionOptions;
}
/**
 *  A reusable base implementation for {@link GLSPServerContribution}s that are using a socket connection to communicate
 *  with a Java or Node based GLSP server.
 **/
export declare abstract class GLSPSocketServerContribution extends BaseGLSPServerContribution {
    protected resolveReady: (value?: void | PromiseLike<void> | undefined) => void;
    onReady: Promise<void>;
    options: GLSPSocketServerContributionOptions;
    protected initialize(): void;
    abstract createContributionOptions(): Partial<GLSPSocketServerContributionOptions>;
    connect(clientConnection: IConnection): void;
    launch(): Promise<void>;
    protected launchJavaProcess(): Promise<RawProcess>;
    protected startNodeProcess(): Promise<RawProcess>;
    protected processLogInfo(data: string | Buffer): void;
    protected connectToSocketServer(clientConnection: IConnection): void;
}
/**
 * Utility function to parse a server port that is defined via command line arg.
 * @param argsKey Name/Key of the commandLine arg
 * @param defaultPort Default port that should be returned if no (valid) port was passed via CLI
 */
export declare function getPort(argsKey: string, defaultPort?: number): number;
//# sourceMappingURL=glsp-socket-server-contribution.d.ts.map