"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPort = exports.GLSPSocketServerContribution = exports.GLSPSocketServerContributionOptions = exports.START_UP_COMPLETE_MSG = void 0;
/********************************************************************************
 * Copyright (c) 2020-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = require("@theia/core/shared/inversify");
const fs = require("fs");
const net = require("net");
const server_1 = require("vscode-ws-jsonrpc/lib/server");
const glsp_server_contribution_1 = require("./glsp-server-contribution");
/**
 * Message that is expected to be printed by the embedded server process to the stdout once the
 * server process startup routine has been completed and is ready to accept incoming connections.
 */
exports.START_UP_COMPLETE_MSG = '[GLSP-Server]:Startup completed';
var GLSPSocketServerContributionOptions;
(function (GLSPSocketServerContributionOptions) {
    /** Default values for {@link JavaGLSPServerLaunchOptions }**/
    function createDefaultOptions() {
        return Object.assign(Object.assign({}, glsp_server_contribution_1.GLSPServerContributionOptions.createDefaultOptions()), { socketConnectionOptions: {
                port: NaN
            } });
    }
    GLSPSocketServerContributionOptions.createDefaultOptions = createDefaultOptions;
    /**
     * Utility function to partially set the launch options. Default values (from 'defaultOptions') are used for
     * options that are not specified.
     * @param options (partial) launch options that should be extended with default values (if necessary)
     */
    function configure(options) {
        return options
            ? Object.assign(Object.assign({}, createDefaultOptions()), options)
            : createDefaultOptions();
    }
    GLSPSocketServerContributionOptions.configure = configure;
})(GLSPSocketServerContributionOptions = exports.GLSPSocketServerContributionOptions || (exports.GLSPSocketServerContributionOptions = {}));
/**
 *  A reusable base implementation for {@link GLSPServerContribution}s that are using a socket connection to communicate
 *  with a Java or Node based GLSP server.
 **/
let GLSPSocketServerContribution = class GLSPSocketServerContribution extends glsp_server_contribution_1.BaseGLSPServerContribution {
    constructor() {
        super(...arguments);
        // eslint-disable-next-line no-invalid-this
        this.onReady = new Promise(resolve => (this.resolveReady = resolve));
    }
    initialize() {
        if (this.createContributionOptions) {
            this.options = GLSPSocketServerContributionOptions.configure(this.createContributionOptions());
        }
    }
    connect(clientConnection) {
        this.connectToSocketServer(clientConnection);
    }
    async launch() {
        if (!this.options.executable) {
            throw new Error('Could not launch GLSP server. No executable path is provided via the contribution options');
        }
        if (!fs.existsSync(this.options.executable)) {
            throw new Error(`Could not launch GLSP server. The given server executable path is not valid: ${this.options.executable}`);
        }
        if (isNaN(this.options.socketConnectionOptions.port)) {
            throw new Error(`Could not launch GLSP Server. The given server port is not a number: ${this.options.socketConnectionOptions.port}`);
        }
        if (this.options.executable.endsWith('.jar')) {
            await this.launchJavaProcess();
        }
        else if (this.options.executable.endsWith('.js')) {
            await this.startNodeProcess();
        }
        else {
            throw new Error(`Could not launch GLSP Server. Invalid executable path ${this.options.executable}`);
        }
        return this.onReady;
    }
    launchJavaProcess() {
        const args = ['-jar', this.options.executable, '--port', `${this.options.socketConnectionOptions.port}`];
        if (this.options.socketConnectionOptions.host) {
            args.push('--host', `${this.options.socketConnectionOptions.host}`);
        }
        if (this.options.additionalArgs) {
            args.push(...this.options.additionalArgs);
        }
        return this.spawnProcessAsync('java', args);
    }
    startNodeProcess() {
        const args = [this.options.executable, '--port', `${this.options.socketConnectionOptions.port}`];
        if (this.options.socketConnectionOptions.host) {
            args.push('--host', `${this.options.socketConnectionOptions.host}`);
        }
        if (this.options.additionalArgs) {
            args.push(...this.options.additionalArgs);
        }
        return this.spawnProcessAsync('node', args);
    }
    processLogInfo(data) {
        if (data) {
            const message = data.toString();
            if (message.startsWith(exports.START_UP_COMPLETE_MSG)) {
                this.resolveReady();
            }
        }
    }
    connectToSocketServer(clientConnection) {
        if (isNaN(this.options.socketConnectionOptions.port)) {
            throw new Error(
            // eslint-disable-next-line max-len
            `Could not connect to to GLSP Server. The given server port is not a number: ${this.options.socketConnectionOptions.port}`);
        }
        const socket = new net.Socket();
        const serverConnection = (0, server_1.createSocketConnection)(socket, socket, () => {
            socket.destroy();
        });
        this.forward(clientConnection, serverConnection);
        socket.connect(this.options.socketConnectionOptions);
    }
};
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GLSPSocketServerContribution.prototype, "initialize", null);
GLSPSocketServerContribution = __decorate([
    (0, inversify_1.injectable)()
], GLSPSocketServerContribution);
exports.GLSPSocketServerContribution = GLSPSocketServerContribution;
/**
 * Utility function to parse a server port that is defined via command line arg.
 * @param argsKey Name/Key of the commandLine arg
 * @param defaultPort Default port that should be returned if no (valid) port was passed via CLI
 */
function getPort(argsKey, defaultPort) {
    argsKey = `--${argsKey.replace('--', '').replace('=', '')}=`;
    const args = process.argv.filter(a => a.startsWith(argsKey));
    if (args.length > 0) {
        return Number.parseInt(args[0].substring(argsKey.length), 10);
    }
    return defaultPort ? defaultPort : NaN;
}
exports.getPort = getPort;
//# sourceMappingURL=glsp-socket-server-contribution.js.map