"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2019-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const common_1 = require("@theia/core/lib/common");
const messaging_service_1 = require("@theia/core/lib/node/messaging/messaging-service");
const inversify_1 = require("@theia/core/shared/inversify");
const common_2 = require("../common");
const glsp_backend_contribution_1 = require("./glsp-backend-contribution");
const glsp_server_contribution_1 = require("./glsp-server-contribution");
exports.default = new inversify_1.ContainerModule(bind => {
    bind(glsp_backend_contribution_1.GLSPBackendContribution).toSelf().inSingletonScope();
    bind(messaging_service_1.MessagingService.Contribution).toService(glsp_backend_contribution_1.GLSPBackendContribution);
    bind(common_2.GLSPContribution.Service).toService(glsp_backend_contribution_1.GLSPBackendContribution);
    (0, common_1.bindContributionProvider)(bind, glsp_server_contribution_1.GLSPServerContribution);
    bind(common_1.ConnectionHandler)
        .toDynamicValue(ctx => new common_1.JsonRpcConnectionHandler(common_2.GLSPContribution.servicePath, () => ctx.container.get(common_2.GLSPContribution.Service)))
        .inSingletonScope();
    bind(common_1.ILogger)
        .toDynamicValue(ctx => {
        const logger = ctx.container.get(common_1.ILogger);
        return logger.child('glsp');
    })
        .inSingletonScope()
        .whenTargetNamed('glsp');
});
//# sourceMappingURL=theia-integration-backend-module.js.map