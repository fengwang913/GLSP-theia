"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TheiaModelSourceChangedHandler = void 0;
/********************************************************************************
 * Copyright (c) 2020-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = require("@eclipse-glsp/client");
const browser_1 = require("@theia/core/lib/browser");
const inversify_1 = require("@theia/core/shared/inversify");
const glsp_diagram_widget_1 = require("./diagram/glsp-diagram-widget");
let TheiaModelSourceChangedHandler = class TheiaModelSourceChangedHandler extends client_1.ExternalModelSourceChangedHandler {
    async notifyModelSourceChange(modelSourceName, options) {
        const element = document.getElementById(options.baseDiv);
        if (element) {
            const widget = this.shell.findWidgetForElement(element);
            if (widget) {
                return this.notifyModelSourceChangedWithWidget(widget, modelSourceName);
            }
        }
        return [];
    }
    async notifyModelSourceChangedWithWidget(widget, modelSourceName) {
        const diagramWidget = (0, glsp_diagram_widget_1.getDiagramWidget)(widget);
        if (!diagramWidget) {
            return [];
        }
        if (this.autoReload() && !diagramWidget.saveable.dirty) {
            await diagramWidget.reloadModel();
            return [];
        }
        await this.shell.activateWidget(widget.id);
        const reload = await this.showDialog(widget.title.label, modelSourceName);
        if (reload === true) {
            await diagramWidget.reloadModel();
        }
        return [];
    }
    autoReload() {
        return false;
    }
    showDialog(widgetTitle, modelSourceName) {
        const dialog = new browser_1.ConfirmDialog({
            title: `Source of editor '${widgetTitle}' changed`,
            msg: `The source '${modelSourceName}' changed. Do you want to omit
            local changes and reload the editor or continue editing and ignore the changes?`,
            cancel: 'Continue editing',
            ok: 'Reload editor',
            wordWrap: 'normal',
            maxWidth: 640
        });
        return dialog.open();
    }
};
__decorate([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    __metadata("design:type", browser_1.ApplicationShell)
], TheiaModelSourceChangedHandler.prototype, "shell", void 0);
TheiaModelSourceChangedHandler = __decorate([
    (0, inversify_1.injectable)()
], TheiaModelSourceChangedHandler);
exports.TheiaModelSourceChangedHandler = TheiaModelSourceChangedHandler;
//# sourceMappingURL=theia-model-source-changed-handler.js.map