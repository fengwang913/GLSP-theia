"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (c) 2019-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const core_1 = require("@theia/core");
const browser_1 = require("@theia/core/lib/browser");
const inversify_1 = require("@theia/core/shared/inversify");
const notifications_manager_1 = require("@theia/messages/lib/browser/notifications-manager");
const theia_sprotty_context_menu_service_1 = require("sprotty-theia/lib/sprotty/theia-sprotty-context-menu-service");
const common_1 = require("../common");
const glsp_diagram_context_key_service_1 = require("./diagram/glsp-diagram-context-key-service");
const glsp_diagram_manager_1 = require("./diagram/glsp-diagram-manager");
const glsp_notification_manager_1 = require("./diagram/glsp-notification-manager");
const theia_context_menu_service_1 = require("./diagram/theia-context-menu-service");
const theia_glsp_connector_1 = require("./diagram/theia-glsp-connector");
const theia_marker_manager_1 = require("./diagram/theia-marker-manager");
const glsp_client_contribution_1 = require("./glsp-client-contribution");
const glsp_client_provider_1 = require("./glsp-client-provider");
const glsp_frontend_contribution_1 = require("./glsp-frontend-contribution");
const theia_model_source_changed_handler_1 = require("./theia-model-source-changed-handler");
const theia_opener_options_navigation_service_1 = require("./theia-opener-options-navigation-service");
exports.default = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    (0, core_1.bindContributionProvider)(bind, glsp_client_contribution_1.GLSPClientContribution);
    bind(glsp_frontend_contribution_1.GLSPFrontendContribution).toSelf().inSingletonScope();
    bind(browser_1.FrontendApplicationContribution).toService(glsp_frontend_contribution_1.GLSPFrontendContribution);
    bind(glsp_client_provider_1.GLSPClientProviderImpl).toSelf().inSingletonScope();
    bind(glsp_client_provider_1.GLSPClientProvider).toService(glsp_client_provider_1.GLSPClientProviderImpl);
    bind(common_1.GLSPContribution.Service)
        .toDynamicValue(({ container }) => browser_1.WebSocketConnectionProvider.createProxy(container, common_1.GLSPContribution.servicePath))
        .inSingletonScope();
    bind(glsp_notification_manager_1.GLSPNotificationManager).toSelf().inSingletonScope();
    if (isBound(notifications_manager_1.NotificationManager)) {
        rebind(notifications_manager_1.NotificationManager).toService(glsp_notification_manager_1.GLSPNotificationManager);
    }
    else {
        bind(notifications_manager_1.NotificationManager).toService(glsp_notification_manager_1.GLSPNotificationManager);
    }
    bind(glsp_diagram_context_key_service_1.GLSPDiagramContextKeyService).toSelf().inSingletonScope();
    bind(theia_opener_options_navigation_service_1.TheiaOpenerOptionsNavigationService).toSelf().inSingletonScope();
    bind(theia_model_source_changed_handler_1.TheiaModelSourceChangedHandler).toSelf().inSingletonScope();
    bind(theia_context_menu_service_1.TheiaContextMenuServiceFactory).toFactory(context => () => {
        const container = context.container.createChild();
        container.bind(theia_sprotty_context_menu_service_1.TheiaContextMenuService).toSelf().inSingletonScope();
        return container.get(theia_sprotty_context_menu_service_1.TheiaContextMenuService);
    });
    bind(theia_marker_manager_1.TheiaMarkerManagerFactory).toFactory(context => () => {
        const container = context.container.createChild();
        container.bind(theia_marker_manager_1.TheiaMarkerManager).toSelf().inSingletonScope();
        return container.get(theia_marker_manager_1.TheiaMarkerManager);
    });
    bind(glsp_diagram_manager_1.TheiaGLSPConnectorProvider).toProvider(theiaGLSPConnectorProviderCreator);
    bind(theia_glsp_connector_1.TheiaGLSPConnectorRegistry).toSelf().inSingletonScope();
});
const theiaGLSPConnectorProviderCreator = (context) => (diagramType) => new Promise(resolve => {
    const registry = context.container.get(theia_glsp_connector_1.TheiaGLSPConnectorRegistry);
    const connector = registry.get(diagramType);
    resolve(connector);
});
//# sourceMappingURL=theia-integration-frontend-module.js.map