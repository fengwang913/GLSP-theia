"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPClientProviderImpl = exports.GLSPClientProvider = void 0;
const core_1 = require("@theia/core");
const inversify_1 = require("@theia/core/shared/inversify");
const glsp_client_contribution_1 = require("./glsp-client-contribution");
exports.GLSPClientProvider = Symbol.for('GLSPClientProvider');
let GLSPClientProviderImpl = class GLSPClientProviderImpl {
    async getLanguageClient(languageId) {
        const contribution = this.getLanguageContribution(languageId);
        if (contribution) {
            return contribution.glspClient;
        }
        return undefined;
    }
    getLanguageContribution(languageId) {
        const contributions = this.contributions.getContributions();
        if (contributions) {
            for (const contribution of contributions) {
                if (contribution.id === languageId) {
                    return contribution;
                }
            }
        }
        return undefined;
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(glsp_client_contribution_1.GLSPClientContribution),
    __metadata("design:type", Object)
], GLSPClientProviderImpl.prototype, "contributions", void 0);
GLSPClientProviderImpl = __decorate([
    (0, inversify_1.injectable)()
], GLSPClientProviderImpl);
exports.GLSPClientProviderImpl = GLSPClientProviderImpl;
//# sourceMappingURL=glsp-client-provider.js.map