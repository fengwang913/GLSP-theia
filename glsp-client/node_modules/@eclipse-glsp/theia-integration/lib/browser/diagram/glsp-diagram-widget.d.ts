/********************************************************************************
 * Copyright (c) 2019-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Args, EditorContextService, IActionDispatcher, ICopyPasteHandler, ModelSource, Viewport } from '@eclipse-glsp/client';
import { Message } from '@phosphor/messaging/lib';
import { ApplicationShell, Saveable, SaveableSource, StorageService, Widget } from '@theia/core/lib/browser';
import { Disposable, Emitter, Event, MaybePromise } from '@theia/core/lib/common';
import { SelectionService } from '@theia/core/lib/common/selection-service';
import { Container } from '@theia/core/shared/inversify';
import { EditorPreferences } from '@theia/editor/lib/browser';
import { DiagramWidget, DiagramWidgetOptions } from 'sprotty-theia';
import { GLSPWidgetOpenerOptions, GLSPWidgetOptions } from './glsp-diagram-manager';
import { TheiaGLSPConnector } from './theia-glsp-connector';
export declare class GLSPDiagramWidget extends DiagramWidget implements SaveableSource {
    readonly widgetId: string;
    readonly diContainer: Container;
    readonly editorPreferences: EditorPreferences;
    readonly storage: StorageService;
    readonly theiaSelectionService: SelectionService;
    readonly connector: TheiaGLSPConnector;
    protected copyPasteHandler?: ICopyPasteHandler;
    saveable: SaveableGLSPModelSource;
    protected options: DiagramWidgetOptions & GLSPWidgetOptions;
    protected requestModelOptions: Args;
    protected storeViewportStateOnClose: boolean;
    constructor(options: DiagramWidgetOptions & GLSPWidgetOpenerOptions, widgetId: string, diContainer: Container, editorPreferences: EditorPreferences, storage: StorageService, theiaSelectionService: SelectionService, connector: TheiaGLSPConnector);
    protected updateSaveable(): void;
    protected initializeSprotty(): void;
    protected dispatchInitialActions(): void;
    protected onAfterAttach(msg: Message): void;
    protected onBeforeDetach(msg: Message): void;
    protected onCloseRequest(msg: Message): void;
    protected onActivateRequest(msg: Message): void;
    get diagramType(): string;
    get editorContext(): EditorContextService;
    reloadModel(): Promise<void>;
    handleMouseEnter(e: MouseEvent): void;
    handleMouseLeave(e: MouseEvent): void;
    handleCopy(e: ClipboardEvent): void;
    handleCut(e: ClipboardEvent): void;
    handlePaste(e: ClipboardEvent): void;
    listenToFocusState(shell: ApplicationShell): void;
    protected isThisWidget(widget?: Widget | null): boolean;
    get hasFocus(): boolean | undefined;
    protected getSelectedElementIds(): Promise<string[]>;
    protected updateGlobalSelection(): Promise<void>;
    protected clearGlobalSelection(): Promise<void>;
    storeState(): object;
    restoreState(oldState: object): void;
    protected storeViewportDataInStorageService(): void;
    restoreViewportDataFromStorageService(): Promise<void>;
    protected removeViewportDataFromStorageService(): Promise<void>;
    protected get viewportStorageId(): string;
    protected getViewportData(): ViewportDataContainer | undefined;
    protected setViewportData(viewportData: ViewportDataContainer): Promise<void>;
}
interface ViewportDataContainer {
    readonly elementId: string;
    readonly viewportData: Viewport;
}
export declare function getDiagramWidget(widget: Widget): GLSPDiagramWidget | undefined;
declare type AutoSaveType = 'off' | 'afterDelay' | 'onFocusChange' | 'onWindowChange';
export declare class SaveableGLSPModelSource implements Saveable, Disposable {
    readonly actionDispatcher: IActionDispatcher;
    readonly modelSource: ModelSource;
    protected _autoSave: AutoSaveType;
    autoSaveDelay: number;
    private autoSaveJobs;
    private isDirty;
    readonly dirtyChangedEmitter: Emitter<void>;
    constructor(actionDispatcher: IActionDispatcher, modelSource: ModelSource);
    get onDirtyChanged(): Event<void>;
    save(): MaybePromise<void>;
    get dirty(): boolean;
    set dirty(newDirty: boolean);
    set autoSave(autoSave: AutoSaveType);
    get autoSave(): AutoSaveType;
    protected scheduleAutoSave(): void;
    protected doAutoSave(): void;
    protected get shouldAutoSave(): boolean;
    revert(options?: Saveable.RevertOptions): Promise<void>;
    createSnapshot(): Saveable.Snapshot;
    dispose(): void;
}
export {};
//# sourceMappingURL=glsp-diagram-widget.d.ts.map