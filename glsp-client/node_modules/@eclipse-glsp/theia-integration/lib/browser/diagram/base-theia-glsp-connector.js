"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.showDialog = exports.BaseTheiaGLSPConnector = void 0;
/********************************************************************************
 * Copyright (c) 2019-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = require("@eclipse-glsp/client");
const core_1 = require("@theia/core");
const browser_1 = require("@theia/core/lib/browser");
const inversify_1 = require("@theia/core/shared/inversify");
const browser_2 = require("@theia/editor/lib/browser");
const sprotty_theia_1 = require("sprotty-theia");
const glsp_client_contribution_1 = require("../glsp-client-contribution");
const glsp_diagram_manager_1 = require("./glsp-diagram-manager");
const glsp_notification_manager_1 = require("./glsp-notification-manager");
const SHOW_DETAILS_LABEL = 'Show details';
let BaseTheiaGLSPConnector = class BaseTheiaGLSPConnector {
    constructor() {
        this.servers = new Map();
        this.widgetMessages = new Map();
        this.widgetStatusTimeouts = new Map();
    }
    initialize() {
        const contributions = this.clientContributions.getContributions().filter(contribution => contribution.id === this.contributionId);
        if (contributions.length === 0) {
            throw new Error(`Could not retrieve GLSP client contribution with id '${this.contributionId}}'`);
        }
        this.glspClientContribution = contributions[0];
        this.glspClientContribution.glspClient.then(client => client.onActionMessage(this.onMessageReceived.bind(this)));
    }
    connect(diagramServer) {
        this.servers.set(diagramServer.clientId, diagramServer);
        this.glspClient.then(client => client.initializeClientSession({
            clientSessionId: diagramServer.clientId,
            diagramType: this.diagramType,
            args: this.initializeClientSessionArgs(diagramServer)
        }));
        diagramServer.connect(this);
    }
    initializeClientSessionArgs(_diagramServer) {
        return undefined;
    }
    disconnect(diagramServer) {
        this.servers.delete(diagramServer.clientId);
        this.glspClient.then(client => client.disposeClientSession({
            clientSessionId: diagramServer.clientId,
            args: this.disposeClientSessionArgs(diagramServer)
        }));
        diagramServer.disconnect();
    }
    disposeClientSessionArgs(_diagramServer) {
        return undefined;
    }
    save(uri, action) {
        this.fileSaver.save(uri, action);
    }
    // Status
    showStatus(widgetId, action) {
        if (this.isClear(action.severity)) {
            this.clearWidgetStatus(widgetId);
        }
        else {
            this.showWidgetStatus(widgetId, action);
        }
    }
    clearWidgetStatus(widgetId) {
        // any status but FATAL, ERROR, WARNING or INFO will lead to a clear of the status
        this.showWidgetStatus(widgetId, client_1.ServerStatusAction.create('', { severity: 'NONE' }));
    }
    showWidgetStatus(widgetId, status) {
        var _a;
        // remove any pending timeout
        const pendingTimeout = this.widgetStatusTimeouts.get(widgetId);
        if (pendingTimeout) {
            window.clearTimeout(pendingTimeout);
            this.widgetStatusTimeouts.delete(widgetId);
        }
        // update status
        const widget = this.widgetManager.getWidgets(this.diagramManagerId).find(w => w.id === widgetId);
        if (widget instanceof sprotty_theia_1.DiagramWidget) {
            widget.setStatus(status);
        }
        // check for any timeouts
        const statusTimeout = (_a = status.timeout) !== null && _a !== void 0 ? _a : -1;
        if (statusTimeout > 0) {
            const newTimeout = window.setTimeout(() => this.clearWidgetStatus(widgetId), statusTimeout);
            this.widgetStatusTimeouts.set(widgetId, newTimeout);
        }
    }
    // Message
    showMessage(widgetId, action) {
        if (this.isClear(action.severity)) {
            this.clearServerMessages(widgetId);
        }
        else {
            this.showServerMessage(widgetId, action);
        }
    }
    clearServerMessages(widgetId) {
        const widgetMessages = Array.from(this.widgetMessages.get(widgetId) || []);
        widgetMessages.forEach(messageId => this.clearServerMessage(widgetId, messageId));
    }
    clearServerMessage(widgetId, messageId) {
        (0, client_1.remove)(this.widgetMessages.get(widgetId) || [], messageId);
        this.notificationManager.clear(messageId);
    }
    showServerMessage(widgetId, action) {
        const widget = this.widgetManager.getWidgets(this.diagramManagerId).find(w => w.id === widgetId);
        const uri = widget instanceof sprotty_theia_1.DiagramWidget ? widget.uri.toString() : '';
        const type = this.toMessageType(action.severity);
        const text = action.message;
        const details = action.details;
        const timeout = action.timeout;
        const options = { timeout, uri };
        const actions = details ? [SHOW_DETAILS_LABEL] : [];
        const message = { type, text, actions, options };
        const messageId = this.createMessageId(message);
        const clearMessageOnClose = result => this.clearServerMessage(widgetId, messageId);
        const onClose = details
            ? result => this.showDetailsOrClearMessage(result, text, details, clearMessageOnClose)
            : clearMessageOnClose;
        switch (message.type) {
            case core_1.MessageType.Error:
                this.addServerMessage(widgetId, messageId);
                this.messageService.error(message.text, message.options, ...(message.actions ? message.actions : [])).then(onClose);
                break;
            case core_1.MessageType.Warning:
                this.addServerMessage(widgetId, messageId);
                this.messageService.warn(message.text, message.options, ...(message.actions ? message.actions : [])).then(onClose);
                break;
            case core_1.MessageType.Info:
                this.addServerMessage(widgetId, messageId);
                this.messageService.info(message.text, message.options, ...(message.actions ? message.actions : [])).then(onClose);
                break;
        }
    }
    addServerMessage(widgetId, messageId) {
        const widgetMessages = this.widgetMessages.get(widgetId) || [];
        widgetMessages.push(messageId);
        this.widgetMessages.set(widgetId, widgetMessages);
    }
    showDetailsOrClearMessage(result, text, details, onClose) {
        if (result === SHOW_DETAILS_LABEL) {
            showDialog(text, details).then(() => onClose());
        }
        else {
            onClose();
        }
    }
    toMessageType(severity) {
        switch (severity) {
            case 'ERROR':
                return core_1.MessageType.Error;
            case 'WARNING':
                return core_1.MessageType.Warning;
            case 'INFO':
                return core_1.MessageType.Info;
        }
        return core_1.MessageType.Log;
    }
    isClear(severity) {
        return severity === 'NONE';
    }
    createMessageId(message) {
        return this.notificationManager.getMessageId(message);
    }
    sendMessage(message) {
        this.glspClient.then(client => client.sendActionMessage(message));
    }
    get glspClient() {
        return this.glspClientContribution.glspClient;
    }
    get initializeResult() {
        return this.glspClientContribution.initializeResult;
    }
    onMessageReceived(message) {
        const diagramServer = this.servers.get(message.clientId);
        if (diagramServer) {
            diagramServer.messageReceived(message);
        }
    }
    get diagramManagerId() {
        return (0, glsp_diagram_manager_1.deriveDiagramManagerId)(this.diagramType);
    }
};
__decorate([
    (0, inversify_1.inject)(sprotty_theia_1.TheiaFileSaver),
    __metadata("design:type", sprotty_theia_1.TheiaFileSaver)
], BaseTheiaGLSPConnector.prototype, "fileSaver", void 0);
__decorate([
    (0, inversify_1.inject)(browser_2.EditorManager),
    __metadata("design:type", browser_2.EditorManager)
], BaseTheiaGLSPConnector.prototype, "editorManager", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.WidgetManager),
    __metadata("design:type", browser_1.WidgetManager)
], BaseTheiaGLSPConnector.prototype, "widgetManager", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.MessageService),
    __metadata("design:type", core_1.MessageService)
], BaseTheiaGLSPConnector.prototype, "messageService", void 0);
__decorate([
    (0, inversify_1.inject)(glsp_notification_manager_1.GLSPNotificationManager),
    __metadata("design:type", glsp_notification_manager_1.GLSPNotificationManager)
], BaseTheiaGLSPConnector.prototype, "notificationManager", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(glsp_client_contribution_1.GLSPClientContribution),
    __metadata("design:type", Object)
], BaseTheiaGLSPConnector.prototype, "clientContributions", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BaseTheiaGLSPConnector.prototype, "initialize", null);
BaseTheiaGLSPConnector = __decorate([
    (0, inversify_1.injectable)()
], BaseTheiaGLSPConnector);
exports.BaseTheiaGLSPConnector = BaseTheiaGLSPConnector;
function showDialog(title, msg) {
    const wrappedMsg = wrapMessage(msg);
    return new browser_1.ConfirmDialog({ title, msg: wrappedMsg }).open();
}
exports.showDialog = showDialog;
/**
 * Wraps the given message in a pre-formatted,
 * scrollable div.
 * @param msg
 */
function wrapMessage(msg) {
    const scrollDiv = document.createElement('div');
    scrollDiv.className = 'scroll-div';
    const pre = document.createElement('pre');
    pre.textContent = msg;
    scrollDiv.appendChild(pre);
    return scrollDiv;
}
//# sourceMappingURL=base-theia-glsp-connector.js.map