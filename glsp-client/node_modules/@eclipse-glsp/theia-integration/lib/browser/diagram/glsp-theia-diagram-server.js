"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirtyStateNotifier = exports.GLSPTheiaDiagramServer = void 0;
/********************************************************************************
 * Copyright (c) 2019-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = require("@eclipse-glsp/client");
const common_1 = require("@theia/core/lib/common");
const inversify_1 = require("@theia/core/shared/inversify");
const sprotty_theia_1 = require("sprotty-theia");
const theia_glsp_connector_1 = require("./theia-glsp-connector");
const receivedFromServerProperty = '__receivedFromServer';
let GLSPTheiaDiagramServer = class GLSPTheiaDiagramServer extends sprotty_theia_1.TheiaDiagramServer {
    constructor() {
        super(...arguments);
        this.dirtyStateChangeEmitter = new common_1.Emitter();
        this.dirtyState = { isDirty: false };
    }
    initialize(registry) {
        (0, client_1.registerDefaultGLSPServerActions)(registry, this);
        registry.register(client_1.SetDirtyStateAction.KIND, this);
    }
    get sourceURI() {
        return this.sourceUri;
    }
    get onDirtyStateChange() {
        return this.dirtyStateChangeEmitter.event;
    }
    setDirty(dirty) {
        if (dirty !== this.dirtyState.isDirty) {
            this.dirtyState = { isDirty: dirty };
            this.dirtyStateChangeEmitter.fire(this.dirtyState);
        }
    }
    handleLocally(action) {
        if (client_1.SetDirtyStateAction.is(action)) {
            this.setDirty(action.isDirty);
            return false;
        }
        if (client_1.ServerMessageAction.is(action)) {
            return this.handleServerMessageAction(action);
        }
        if (client_1.SetEditModeAction.is(action)) {
            return this.handleSetEditModeAction(action);
        }
        return super.handleLocally(action);
    }
    handleExportSvgAction(action) {
        this.connector.save(this.sourceUri, action);
        return false;
    }
    handleComputedBounds(_action) {
        return true;
    }
    handleSetEditModeAction(action) {
        return action[receivedFromServerProperty] !== true;
    }
    handleServerMessageAction(status) {
        this.connector.showMessage(this.clientId, status);
        return false;
    }
    get connector() {
        if (!this._connector) {
            throw Error('TheiaDiagramServer is not connected.');
        }
        if (!(0, theia_glsp_connector_1.isTheiaGLSPConnector)(this._connector)) {
            throw new Error('Connector needs to be a instance of "TheiaGLSPConnector');
        }
        return this._connector;
    }
};
GLSPTheiaDiagramServer = __decorate([
    (0, inversify_1.injectable)()
], GLSPTheiaDiagramServer);
exports.GLSPTheiaDiagramServer = GLSPTheiaDiagramServer;
var DirtyStateNotifier;
(function (DirtyStateNotifier) {
    function is(arg) {
        return !!arg && 'onDirtyStateChange' in arg;
    }
    DirtyStateNotifier.is = is;
})(DirtyStateNotifier = exports.DirtyStateNotifier || (exports.DirtyStateNotifier = {}));
//# sourceMappingURL=glsp-theia-diagram-server.js.map