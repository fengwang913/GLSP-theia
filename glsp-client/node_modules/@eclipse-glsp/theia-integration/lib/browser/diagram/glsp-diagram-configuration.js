"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureDiagramServer = exports.GLSPDiagramConfiguration = void 0;
/********************************************************************************
 * Copyright (c) 2020-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = require("@eclipse-glsp/client");
const core_1 = require("@theia/core");
const browser_1 = require("@theia/core/lib/browser");
const inversify_1 = require("@theia/core/shared/inversify");
const sprotty_theia_1 = require("sprotty-theia");
const theia_model_source_changed_handler_1 = require("../theia-model-source-changed-handler");
const theia_navigate_to_external_target_handler_1 = require("../theia-navigate-to-external-target-handler");
const theia_context_menu_service_1 = require("./theia-context-menu-service");
const theia_glsp_connector_1 = require("./theia-glsp-connector");
const theia_glsp_selection_forwarder_1 = require("./theia-glsp-selection-forwarder");
const theia_marker_manager_1 = require("./theia-marker-manager");
let GLSPDiagramConfiguration = class GLSPDiagramConfiguration {
    createContainer(widgetId) {
        const container = this.doCreateContainer(widgetId);
        this.initializeContainer(container);
        return container;
    }
    initializeContainer(container) {
        container.bind(theia_glsp_connector_1.TheiaGLSPConnector).toConstantValue(this.connectorRegistry.get(this.diagramType));
        container.bind(client_1.TYPES.IActionHandlerInitializer).to(theia_glsp_selection_forwarder_1.TheiaGLSPSelectionForwarder);
        container.bind(core_1.SelectionService).toConstantValue(this.selectionService);
        container.bind(browser_1.OpenerService).toConstantValue(this.openerService);
        container.bind(core_1.CommandService).toConstantValue(this.commandService);
        container.bind(client_1.ExternalModelSourceChangedHandler).toConstantValue(this.modelSourceChangedHandler);
        (0, theia_context_menu_service_1.connectTheiaContextMenuService)(container, this.contextMenuServiceFactory);
        (0, theia_marker_manager_1.connectTheiaMarkerManager)(container, this.theiaMarkerManager, this.diagramType);
        (0, client_1.configureActionHandler)(container, client_1.NavigateToExternalTargetAction.KIND, theia_navigate_to_external_target_handler_1.TheiaNavigateToExternalTargetHandler);
    }
};
__decorate([
    (0, inversify_1.inject)(core_1.SelectionService),
    __metadata("design:type", core_1.SelectionService)
], GLSPDiagramConfiguration.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.OpenerService),
    __metadata("design:type", Object)
], GLSPDiagramConfiguration.prototype, "openerService", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.CommandService),
    __metadata("design:type", Object)
], GLSPDiagramConfiguration.prototype, "commandService", void 0);
__decorate([
    (0, inversify_1.inject)(theia_model_source_changed_handler_1.TheiaModelSourceChangedHandler),
    __metadata("design:type", theia_model_source_changed_handler_1.TheiaModelSourceChangedHandler)
], GLSPDiagramConfiguration.prototype, "modelSourceChangedHandler", void 0);
__decorate([
    (0, inversify_1.inject)(theia_context_menu_service_1.TheiaContextMenuServiceFactory),
    __metadata("design:type", Function)
], GLSPDiagramConfiguration.prototype, "contextMenuServiceFactory", void 0);
__decorate([
    (0, inversify_1.inject)(theia_marker_manager_1.TheiaMarkerManagerFactory),
    __metadata("design:type", Function)
], GLSPDiagramConfiguration.prototype, "theiaMarkerManager", void 0);
__decorate([
    (0, inversify_1.inject)(theia_glsp_connector_1.TheiaGLSPConnectorRegistry),
    __metadata("design:type", theia_glsp_connector_1.TheiaGLSPConnectorRegistry)
], GLSPDiagramConfiguration.prototype, "connectorRegistry", void 0);
GLSPDiagramConfiguration = __decorate([
    (0, inversify_1.injectable)()
], GLSPDiagramConfiguration);
exports.GLSPDiagramConfiguration = GLSPDiagramConfiguration;
function configureDiagramServer(container, server) {
    container.bind(server).toSelf().inSingletonScope();
    container.bind(client_1.TYPES.ModelSource).toService(server);
    container.bind(sprotty_theia_1.TheiaDiagramServer).toService(server);
}
exports.configureDiagramServer = configureDiagramServer;
//# sourceMappingURL=glsp-diagram-configuration.js.map