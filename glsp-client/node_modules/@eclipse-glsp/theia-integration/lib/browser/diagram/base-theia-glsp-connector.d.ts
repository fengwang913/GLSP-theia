/********************************************************************************
 * Copyright (c) 2019-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { ActionMessage, Args, ExportSvgAction, GLSPClient, InitializeResult, ServerMessageAction, ServerStatusAction } from '@eclipse-glsp/client';
import { ContributionProvider, Message, MessageService, MessageType } from '@theia/core';
import { WidgetManager } from '@theia/core/lib/browser';
import { EditorManager } from '@theia/editor/lib/browser';
import { TheiaDiagramServer, TheiaFileSaver } from 'sprotty-theia';
import { GLSPClientContribution } from '../glsp-client-contribution';
import { GLSPNotificationManager } from './glsp-notification-manager';
import { TheiaGLSPConnector } from './theia-glsp-connector';
export declare abstract class BaseTheiaGLSPConnector implements TheiaGLSPConnector {
    protected readonly fileSaver: TheiaFileSaver;
    protected readonly editorManager: EditorManager;
    protected readonly widgetManager: WidgetManager;
    protected readonly messageService: MessageService;
    protected readonly notificationManager: GLSPNotificationManager;
    protected readonly clientContributions: ContributionProvider<GLSPClientContribution>;
    private servers;
    private widgetMessages;
    private widgetStatusTimeouts;
    abstract readonly diagramType: string;
    abstract readonly contributionId: string;
    protected glspClientContribution: GLSPClientContribution;
    protected initialize(): void;
    connect(diagramServer: TheiaDiagramServer): void;
    initializeClientSessionArgs(_diagramServer: TheiaDiagramServer): Args | undefined;
    disconnect(diagramServer: TheiaDiagramServer): void;
    disposeClientSessionArgs(_diagramServer: TheiaDiagramServer): Args | undefined;
    save(uri: string, action: ExportSvgAction): void;
    showStatus(widgetId: string, action: ServerStatusAction): void;
    protected clearWidgetStatus(widgetId: string): void;
    protected showWidgetStatus(widgetId: string, status: ServerStatusAction): void;
    showMessage(widgetId: string, action: ServerMessageAction): void;
    protected clearServerMessages(widgetId: string): void;
    protected clearServerMessage(widgetId: string, messageId: string): void;
    protected showServerMessage(widgetId: string, action: ServerMessageAction): void;
    protected addServerMessage(widgetId: string, messageId: string): void;
    protected showDetailsOrClearMessage(result: string | undefined, text: string, details: string, onClose: (value?: string) => void): void;
    protected toMessageType(severity: string): MessageType.Error | MessageType.Warning | MessageType.Info | MessageType.Log;
    protected isClear(severity: string): boolean;
    createMessageId(message: Message): string;
    sendMessage(message: ActionMessage): void;
    get glspClient(): Promise<GLSPClient>;
    get initializeResult(): Promise<InitializeResult>;
    onMessageReceived(message: ActionMessage): void;
    get diagramManagerId(): string;
}
export declare function showDialog(title: string, msg: string): Promise<boolean | undefined>;
//# sourceMappingURL=base-theia-glsp-connector.d.ts.map