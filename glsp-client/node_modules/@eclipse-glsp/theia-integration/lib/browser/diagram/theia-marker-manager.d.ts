/********************************************************************************
 * Copyright (c) 2020-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { ExternalMarkerManager, Marker } from '@eclipse-glsp/client/lib';
import URI from '@theia/core/lib/common/uri';
import { Container } from '@theia/core/shared/inversify';
import { ProblemManager } from '@theia/markers/lib/browser/problem/problem-manager';
import { Diagnostic } from 'vscode-languageserver-types';
export declare const TheiaMarkerManagerFactory: unique symbol;
export declare function connectTheiaMarkerManager(container: Container, markerManagerFactory: () => ExternalMarkerManager, languageLabel: string): void;
declare class DiagnosticMarkers {
    protected diagnotic2marker: Map<Diagnostic, Marker>;
    get size(): number;
    all(): IterableIterator<Marker>;
    marker(diagnostic: Diagnostic): Marker | undefined;
    add(diagnostic: Diagnostic, marker: Marker): Map<Diagnostic, Marker>;
    delete(diagnostic: Diagnostic): boolean;
    clear(): void;
}
export declare class TheiaMarkerManager extends ExternalMarkerManager {
    protected readonly problemManager?: ProblemManager;
    protected uri2markers: Map<URI, DiagnosticMarkers>;
    protected markers(uri: URI): DiagnosticMarkers;
    protected initialize(): void;
    protected refreshMarker(uri: URI): Promise<void>;
    setMarkers(markers: Marker[], sourceUri?: string): void;
    protected createDiagnostic(uri: URI, marker: Marker): Diagnostic;
    protected toSeverity(kind: string): 1 | 2 | 3 | 4 | undefined;
}
export {};
//# sourceMappingURL=theia-marker-manager.d.ts.map