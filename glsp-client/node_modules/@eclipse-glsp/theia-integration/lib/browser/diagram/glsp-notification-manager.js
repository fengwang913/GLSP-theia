"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPNotificationManager = void 0;
const notifications_manager_1 = require("@theia/messages/lib/browser/notifications-manager");
const inversify_1 = require("inversify");
const ts_md5_1 = require("ts-md5");
/**
 *  A customized notification manager that can properly handle GLSP messages.
 *  For GLSP messages the file uri needs to be considered when generating the message id
 *  to derive the editor widget for which this message is intended.
 */
let GLSPNotificationManager = class GLSPNotificationManager extends notifications_manager_1.NotificationManager {
    getMessageId(message) {
        const options = message.options;
        if (isGLSPMessageOptions(options)) {
            return String(ts_md5_1.Md5.hashStr(`[${message.type} @ ${options.uri}] ${message.text} : ${(message.actions || []).join(' | ')};`));
        }
        return super.getMessageId(message);
    }
};
GLSPNotificationManager = __decorate([
    (0, inversify_1.injectable)()
], GLSPNotificationManager);
exports.GLSPNotificationManager = GLSPNotificationManager;
function isGLSPMessageOptions(options) {
    return options !== undefined && 'uri' in options;
}
//# sourceMappingURL=glsp-notification-manager.js.map