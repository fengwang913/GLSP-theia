"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TheiaGLSPSelectionForwarder = exports.isGlspSelection = void 0;
/********************************************************************************
 * Copyright (c) 2021-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = require("@eclipse-glsp/client");
const inversify_1 = require("@theia/core/shared/inversify");
const sprotty_theia_1 = require("sprotty-theia");
const glsp_selection_data_service_1 = require("./glsp-selection-data-service");
function isGlspSelection(selection) {
    return !!selection && (0, sprotty_theia_1.isSprottySelection)(selection);
}
exports.isGlspSelection = isGlspSelection;
let TheiaGLSPSelectionForwarder = class TheiaGLSPSelectionForwarder extends sprotty_theia_1.TheiaSprottySelectionForwarder {
    handle(action) {
        if (client_1.SelectAction.is(action) && this.selectionDataService) {
            this.selectionDataService.getSelectionData(action.selectedElementsIDs).then((additionalSelectionData) => (this.selectionService.selection = {
                selectedElementsIDs: action.selectedElementsIDs,
                additionalSelectionData: additionalSelectionData,
                widgetId: this.viewerOptions.baseDiv,
                sourceUri: this.sourceUri
            }));
        }
        else {
            super.handle(action);
        }
    }
};
__decorate([
    (0, inversify_1.inject)(glsp_selection_data_service_1.GlspSelectionDataService),
    (0, inversify_1.optional)(),
    __metadata("design:type", glsp_selection_data_service_1.GlspSelectionDataService)
], TheiaGLSPSelectionForwarder.prototype, "selectionDataService", void 0);
TheiaGLSPSelectionForwarder = __decorate([
    (0, inversify_1.injectable)()
], TheiaGLSPSelectionForwarder);
exports.TheiaGLSPSelectionForwarder = TheiaGLSPSelectionForwarder;
//# sourceMappingURL=theia-glsp-selection-forwarder.js.map