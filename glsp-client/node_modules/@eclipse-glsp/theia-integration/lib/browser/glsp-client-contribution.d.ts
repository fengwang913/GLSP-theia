/********************************************************************************
 * Copyright (C) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Args, ConnectionProvider, GLSPClient, InitializeParameters, InitializeResult, MaybePromise } from '@eclipse-glsp/client';
import { Disposable, DisposableCollection, MessageService } from '@theia/core';
import { FrontendApplication, WebSocketConnectionProvider } from '@theia/core/lib/browser';
import { WorkspaceService } from '@theia/workspace/lib/browser';
import { DiagramManagerProvider } from 'sprotty-theia';
import 'sprotty-theia/css/theia-sprotty.css';
import 'sprotty/css/sprotty.css';
import '../../css/command-palette.css';
import '../../css/decoration.css';
import '../../css/diagram.css';
import '../../css/theia-dialogs.css';
import '../../css/tool-palette.css';
import { GLSPContribution } from '../common';
export declare const GLSPClientContribution: unique symbol;
export interface GLSPClientContribution extends GLSPContribution {
    readonly running: boolean;
    readonly initializeResult: Promise<InitializeResult>;
    readonly glspClient: Promise<GLSPClient>;
    waitForActivation(app: FrontendApplication): Promise<void>;
    activate(app: FrontendApplication): Disposable;
    deactivate(app: FrontendApplication): void;
}
export declare abstract class BaseGLSPClientContribution implements GLSPClientContribution {
    abstract readonly id: string;
    protected _glspClient: GLSPClient | undefined;
    protected resolveReady: (glspClient: GLSPClient) => void;
    protected ready: Promise<GLSPClient>;
    protected readonly toDeactivate: DisposableCollection;
    protected _initializeResult: InitializeResult | undefined;
    protected readonly workspaceService: WorkspaceService;
    protected readonly messageService: MessageService;
    protected readonly connectionProvider: WebSocketConnectionProvider;
    protected diagramManagerProviders: DiagramManagerProvider[];
    constructor();
    get glspClient(): Promise<GLSPClient>;
    get initializeResult(): Promise<InitializeResult>;
    waitForActivation(app: FrontendApplication): Promise<any>;
    activate(): Disposable;
    deactivate(_app: FrontendApplication): void;
    protected doActivate(toStop: DisposableCollection): Promise<void>;
    get running(): boolean;
    protected onWillStart(languageClient: GLSPClient): Promise<void>;
    protected initialize(languageClient: GLSPClient): Promise<InitializeResult>;
    protected createInitializeParameters(): Promise<InitializeParameters>;
    protected createInitializeOptions(): MaybePromise<Args | undefined>;
    protected onReady(languageClient: GLSPClient): void;
    protected waitForReady(): void;
    protected createGLSPCLient(connectionProvider: ConnectionProvider): GLSPClient;
    protected get workspaceContains(): string[];
    protected waitForItemInWorkspace(): Promise<any>;
}
//# sourceMappingURL=glsp-client-contribution.d.ts.map