"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationStatus = exports.ApplyLabelEditOperation = exports.SetEditValidationResultAction = exports.RequestEditValidationAction = void 0;
/********************************************************************************
 * Copyright (c) 2020-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const type_util_1 = require("../utils/type-util");
const base_protocol_1 = require("./base-protocol");
var RequestEditValidationAction;
(function (RequestEditValidationAction) {
    RequestEditValidationAction.KIND = 'requestEditValidation';
    function is(object) {
        return (base_protocol_1.RequestAction.hasKind(object, RequestEditValidationAction.KIND) &&
            (0, type_util_1.hasStringProp)(object, 'contextId') &&
            (0, type_util_1.hasStringProp)(object, 'modelElementId') &&
            (0, type_util_1.hasStringProp)(object, 'text'));
    }
    RequestEditValidationAction.is = is;
    function create(options) {
        return Object.assign({ kind: RequestEditValidationAction.KIND, requestId: '' }, options);
    }
    RequestEditValidationAction.create = create;
})(RequestEditValidationAction = exports.RequestEditValidationAction || (exports.RequestEditValidationAction = {}));
var SetEditValidationResultAction;
(function (SetEditValidationResultAction) {
    SetEditValidationResultAction.KIND = 'setEditValidationResult';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetEditValidationResultAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'status');
    }
    SetEditValidationResultAction.is = is;
    function create(status, options = {}) {
        return Object.assign({ kind: SetEditValidationResultAction.KIND, responseId: '', status }, options);
    }
    SetEditValidationResultAction.create = create;
})(SetEditValidationResultAction = exports.SetEditValidationResultAction || (exports.SetEditValidationResultAction = {}));
var ApplyLabelEditOperation;
(function (ApplyLabelEditOperation) {
    ApplyLabelEditOperation.KIND = 'applyLabelEdit';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, ApplyLabelEditOperation.KIND) && (0, type_util_1.hasStringProp)(object, 'labelId') && (0, type_util_1.hasStringProp)(object, 'text');
    }
    ApplyLabelEditOperation.is = is;
    function create(options) {
        return Object.assign({ kind: ApplyLabelEditOperation.KIND, isOperation: true }, options);
    }
    ApplyLabelEditOperation.create = create;
})(ApplyLabelEditOperation = exports.ApplyLabelEditOperation || (exports.ApplyLabelEditOperation = {}));
var ValidationStatus;
(function (ValidationStatus) {
    /**
     * The default {@link ValidationStatus} severity levels used in GLSP.
     */
    // eslint-disable-next-line no-shadow
    let Severity;
    (function (Severity) {
        Severity[Severity["FATAL"] = 0] = "FATAL";
        Severity[Severity["ERROR"] = 1] = "ERROR";
        Severity[Severity["WARNING"] = 2] = "WARNING";
        Severity[Severity["INFO"] = 3] = "INFO";
        Severity[Severity["OK"] = 4] = "OK";
        // eslint-disable-next-line no-shadow
        Severity[Severity["NONE"] = 5] = "NONE";
    })(Severity = ValidationStatus.Severity || (ValidationStatus.Severity = {}));
    /**
     * An empty {@link ValidationStatus}.
     */
    ValidationStatus.NONE = {
        severity: Severity.NONE,
        message: '',
        error: { code: -1, message: '', data: {} }
    };
    /**
     * Utility function to check wether the given {@link ValidationStatus} has
     * a severity that is considered to be OK.
     * @param validationStatus The validation status to check.
     * @returns `true` if the given status has a non critical severity, `false` otherwise.
     */
    function isOk(validationStatus) {
        return (validationStatus.severity === Severity.OK ||
            validationStatus.severity === Severity.INFO ||
            validationStatus.severity === Severity.NONE);
    }
    ValidationStatus.isOk = isOk;
    /**
     * Utility function to check wether the given {@link ValidationStatus} has
     * a `warning` severity.
     * @param validationStatus The validation status to check.
     * @returns `true` if the given status has a `warning` severity, `false` otherwise.
     */
    function isWarning(validationStatus) {
        return validationStatus.severity === Severity.WARNING;
    }
    ValidationStatus.isWarning = isWarning;
    /**
     * Utility function to check wether the given {@link ValidationStatus} has
     * an `error` or `fatal` severity.
     * @param validationStatus The validation status to check.
     * @returns `true` if the given status has a `error` or `fatal` severity, `false` otherwise.
     */
    function isError(validationStatus) {
        return validationStatus.severity === Severity.ERROR || validationStatus.severity === Severity.FATAL;
    }
    ValidationStatus.isError = isError;
})(ValidationStatus = exports.ValidationStatus || (exports.ValidationStatus = {}));
//# sourceMappingURL=element-text-editing.js.map