"use strict";
/********************************************************************************
 * Copyright (c) 2021-2022 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasteOperation = exports.CutOperation = exports.SetClipboardDataAction = exports.RequestClipboardDataAction = void 0;
const type_util_1 = require("../utils/type-util");
const base_protocol_1 = require("./base-protocol");
var RequestClipboardDataAction;
(function (RequestClipboardDataAction) {
    RequestClipboardDataAction.KIND = 'requestClipboardData';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestClipboardDataAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'editorContext');
    }
    RequestClipboardDataAction.is = is;
    function create(editorContext, options = {}) {
        return Object.assign({ kind: RequestClipboardDataAction.KIND, requestId: '', editorContext }, options);
    }
    RequestClipboardDataAction.create = create;
})(RequestClipboardDataAction = exports.RequestClipboardDataAction || (exports.RequestClipboardDataAction = {}));
var SetClipboardDataAction;
(function (SetClipboardDataAction) {
    SetClipboardDataAction.KIND = 'setClipboardData';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetClipboardDataAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'clipboardData');
    }
    SetClipboardDataAction.is = is;
    function create(clipboardData, options = {}) {
        return Object.assign({ kind: SetClipboardDataAction.KIND, responseId: '', clipboardData }, options);
    }
    SetClipboardDataAction.create = create;
})(SetClipboardDataAction = exports.SetClipboardDataAction || (exports.SetClipboardDataAction = {}));
var CutOperation;
(function (CutOperation) {
    CutOperation.KIND = 'cut';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, CutOperation.KIND) && (0, type_util_1.hasObjectProp)(object, 'editorContext');
    }
    CutOperation.is = is;
    function create(editorContext) {
        return {
            kind: CutOperation.KIND,
            isOperation: true,
            editorContext
        };
    }
    CutOperation.create = create;
})(CutOperation = exports.CutOperation || (exports.CutOperation = {}));
var PasteOperation;
(function (PasteOperation) {
    PasteOperation.KIND = 'paste';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, PasteOperation.KIND) && (0, type_util_1.hasObjectProp)(object, 'clipboardData') && (0, type_util_1.hasObjectProp)(object, 'editorContext');
    }
    PasteOperation.is = is;
    function create(options) {
        return Object.assign({ kind: PasteOperation.KIND, isOperation: true }, options);
    }
    PasteOperation.create = create;
})(PasteOperation = exports.PasteOperation || (exports.PasteOperation = {}));
//# sourceMappingURL=clipboard.js.map